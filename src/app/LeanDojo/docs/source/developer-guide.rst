Developer Guide
===============

This page includes information that are **hidden from most users but useful if you want to contribute to LeanDojo**. 
It requires additional dependencies installed via :code:`pip install "lean-dojo[all]"`.


Contribution Guideline
**********************
We welcome and appreciate contributions from the community. 
For bug fixes and relatively minor changes (comments, typos, etc.), 
feel free to submit a pull request directly. For anything more substantial, 
please first reach out to us before implementing. All contributions should 
conform to our code formatting standards (see :ref:`code-formatting`).


Implementation Notes
********************

.. _modified-lean:

Modified Lean 3
---------------

Lean 3's AST export mechanism (:code:`lean --ast --tsast --tspp`) provides rich 
syntactic information about :file:`*.lean` files, as well as certain semantic information
such as tactic states. However, it does not provide everything we need for retrieval-augmented 
theorem proving. For each constant (premise) in a tactic, we'd like to know:
 
* Its start/end positions within the tactic.
* Its fully qualified name.
* Where to find its definition (:file:`*.lean` file and the position within the file).

The first one is syntactic and is already provided by :code:`lean --ast --tsast --tspp`. The remaining 
two are produced by Lean's elaborator but not exported. Therefore, we modify Lean to export them.
Our modification is implemented as a `patch <https://github.com/lean-dojo/LeanDojo/blob/main/src/lean_dojo/data_extraction/0001-Modify-Lean-for-proof-recording.patch>`_
, which can be applied to Lean from `v3.42.1 <https://github.com/leanprover-community/lean/releases/tag/v3.42.1>`_ up to the most recent version by :code:`git apply` (see :ref:`lean_dojo.data_extraction.trace`). 
Note that:

* The modification only changes Lean's frontend but not its core functions for proof checking. Therefore, we do not compromise Lean's soundness. 
* The modification is only for data extraction. For interaction, we still use the original, unmodified Lean. 



Testing
*******

We use `pytest <https://docs.pytest.org/>`_ for testing. You can run tests by:

.. code-block:: bash

   VERBOSE=1 CACHE_DIR=~/.cache/lean_dojo_testing DISABLE_REMOTE_CACHE=1 pytest -s tests
   rm -rf ~/.cache/lean_dojo_testing 

The environment variable :code:`CACHE_DIR` makes sure the testing uses a temporary cache directory that 
does not interfere with the deployed code. The temporary cache directory is deleted after the testing completes. 
:code:`DISABLE_REMOTE_CACHE=1` instructs repos to be built locally. Note that running all tests can take almost 1 day on 32 CPUs.


Building the Documentation
**************************

This documentation is generated by `Sphinx <https://www.sphinx-doc.org/en/master/>`_.
You can build it by:

.. code-block:: bash
   
   cd docs && make clean && make html && cd ..


Building the Package and Uploading to PyPI
******************************************

You probably won't need it, but this is how to build the LeanDojo package and upload it to PyPI:

.. code-block:: bash

   hatch build
   hatch publish


Static Type Checking
********************

The source code of LeanDojo uses `Python type annotations <https://docs.python.org/3.8/library/typing.html>`_ extensively.
You can perform static type checking using `mypy <https://www.mypy-lang.org/>`_ by 

.. code-block:: bash
   
   mypy src/lean_dojo

Currently there are still many type errors. Contributions to fix them are welcome.


.. _code-formatting:

Code Formatting
***************

LeanDojo's code is formatted by `Black <https://black.readthedocs.io/en/stable/>`_.
We use `Github Actions <https://github.com/lean-dojo/LeanDojo/blob/main/.github/workflows/format_code.yaml>`_ to ensure all modifications are formatted.
